-        Memoize within lexer by line so you can get the tokens for the line being edited

-        Use those tokens to pattern match against the following productions

-        You must determine scope and type if possible

o   If you are in a func, reverse parse back to beginning of func to collect variables making sure to skip declarations in adjacent scopes on the way

 
-        Outside Scope

 

-        Defining Type Header ( type X @ )

o   Show keyword completions { struct, interface }

o   Show other types

 

-        Defining Type body (type X struct { @)

o   Show other types

                      
-        Defining Interface body ( type X interface { @ )

o   Show Nothing

 

-        Defining Const (const X @)

o   Show types

 
-        Setting Const ( const X int = @ )

o   Show other variables

o   Show iota

o   Show funcs

 

-        Defining Var ( var x @ )

o   Show types

 
-        Setting Var ( var x int = @ )

o   Show other variables of same type

o   Show constants of same type

o   Show import aliases

o   Show funcs that return proper type

 

-        Defining Func ( func @ )

o   Show types

 
-        Defining Func Parms ( func X ( @ -> func X ( a A)

o   Show types

 

-        ** (Potentially Recursive) Defining Func Returns ( func X ( a A) @ )

o   Show types

o   Show func keywords

 

-        Defining Func returning closure - closure params  ( func X ( a A) func ( @ )

o   Show types

o   Show func keywords

 
-        Defining Func closure return - closure return  ( func X ( a A) func ( a A) @ )

o   Show types

o   Show func keywords

 
-        Defining Const